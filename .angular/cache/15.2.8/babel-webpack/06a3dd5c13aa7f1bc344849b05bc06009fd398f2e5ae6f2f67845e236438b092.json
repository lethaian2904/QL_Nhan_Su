{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { catchError, throwError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ServerHttpService {\n  constructor(httpClient) {\n    this.httpClient = httpClient;\n    this.httpOptions = {\n      headers: new HttpHeaders({\n        'Context-Type': 'aplication/json'\n      })\n    };\n    this.REST_API_SERVER = 'http://localhost:3000';\n  }\n  getNhanviens() {\n    const url = `${this.REST_API_SERVER}/nhanviens`;\n    return this.httpClient.get(url, this.httpOptions).pipe(catchError(this.handleError));\n  }\n  getNhanvien(nhanvienID) {\n    const url = `${this.REST_API_SERVER}/nhanviens/` + nhanvienID;\n    return this.httpClient.get(url, this.httpOptions).pipe(catchError(this.handleError));\n  }\n  getRamdomNhanvien() {\n    const url = `http://randomuser.me/api/?results=1`;\n    return this.httpClient.get(url, this.httpOptions).pipe(catchError(this.handleError));\n  }\n  addNhanvien(data) {\n    const url = `${this.REST_API_SERVER}/nhanviens`;\n    return this.httpClient.post(url, data, this.httpOptions).pipe(catchError(this.handleError));\n  }\n  deleteNhanVien(nhanvienID) {\n    const url = `${this.REST_API_SERVER}/profile`;\n    return this.httpClient.get(url, this.httpOptions).pipe(catchError(this.handleError));\n  }\n  getProfile() {\n    const url = `${this.REST_API_SERVER}/profile`;\n    return this.httpClient.get(url, this.httpOptions).pipe(catchError(this.handleError));\n  }\n  handleError(error) {\n    if (error.error instanceof ErrorEvent) {\n      console.error('An error occurred:', error.error.message);\n    } else {\n      console.error(`Backend returned code ${error.status}, ` + `body was: ${error.error}`);\n    }\n    return throwError('Something bad happened; please try again later.');\n  }\n}\nServerHttpService.ɵfac = function ServerHttpService_Factory(t) {\n  return new (t || ServerHttpService)(i0.ɵɵinject(i1.HttpClient));\n};\nServerHttpService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ServerHttpService,\n  factory: ServerHttpService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAAA,SAAqDA,WAAW,QAAQ,sBAAsB;AAE9F,SAAqBC,UAAU,EAAEC,UAAU,QAAQ,MAAM;;;AAOzD,OAAM,MAAOC,iBAAiB;EAU5BC,YAAoBC,UAAsB;IAAtB,eAAU,GAAVA,UAAU;IARtB,gBAAW,GAAG;MACpBC,OAAO,EAAE,IAAIN,WAAW,CAAC;QACvB,cAAc,EAAE;OACjB;KACF;IACK,oBAAe,GAAG,uBAAuB;EAGD;EAEvCO,YAAY;IACjB,MAAMC,GAAG,GAAG,GAAG,IAAI,CAACC,eAAe,YAAY;IAC/C,OAAO,IAAI,CAACJ,UAAU,CACrBK,GAAG,CAAMF,GAAG,EAAE,IAAI,CAACG,WAAW,CAAC,CAC/BC,IAAI,CAACX,UAAU,CAAC,IAAI,CAACY,WAAW,CAAC,CAAC;EACrC;EAEOC,WAAW,CAACC,UAAkB;IACnC,MAAMP,GAAG,GAAG,GAAG,IAAI,CAACC,eAAe,aAAa,GAAGM,UAAU;IAC7D,OAAO,IAAI,CAACV,UAAU,CACrBK,GAAG,CAAMF,GAAG,EAAE,IAAI,CAACG,WAAW,CAAC,CAC/BC,IAAI,CAACX,UAAU,CAAC,IAAI,CAACY,WAAW,CAAC,CAAC;EACrC;EAEOG,iBAAiB;IACtB,MAAMR,GAAG,GAAG,qCAAqC;IACjD,OAAO,IAAI,CAACH,UAAU,CACrBK,GAAG,CAAMF,GAAG,EAAE,IAAI,CAACG,WAAW,CAAC,CAC/BC,IAAI,CAACX,UAAU,CAAC,IAAI,CAACY,WAAW,CAAC,CAAC;EACrC;EAEOI,WAAW,CAACC,IAAe;IAChC,MAAMV,GAAG,GAAG,GAAG,IAAI,CAACC,eAAe,YAAY;IAC/C,OAAO,IAAI,CAACJ,UAAU,CACrBc,IAAI,CAAMX,GAAG,EAAEU,IAAI,EAAE,IAAI,CAACP,WAAW,CAAC,CACtCC,IAAI,CAACX,UAAU,CAAC,IAAI,CAACY,WAAW,CAAC,CAAC;EACrC;EAEOO,cAAc,CAACL,UAAkB;IACtC,MAAMP,GAAG,GAAG,GAAG,IAAI,CAACC,eAAe,UAAU;IAC7C,OAAO,IAAI,CAACJ,UAAU,CACrBK,GAAG,CAAMF,GAAG,EAAE,IAAI,CAACG,WAAW,CAAC,CAC/BC,IAAI,CAACX,UAAU,CAAC,IAAI,CAACY,WAAW,CAAC,CAAC;EACrC;EAGOQ,UAAU;IACb,MAAMb,GAAG,GAAG,GAAG,IAAI,CAACC,eAAe,UAAU;IAC7C,OAAO,IAAI,CAACJ,UAAU,CACrBK,GAAG,CAAMF,GAAG,EAAE,IAAI,CAACG,WAAW,CAAC,CAC/BC,IAAI,CAACX,UAAU,CAAC,IAAI,CAACY,WAAW,CAAC,CAAC;EACvC;EAEQA,WAAW,CAACS,KAAwB;IAC1C,IAAIA,KAAK,CAACA,KAAK,YAAYC,UAAU,EAAE;MACrCC,OAAO,CAACF,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAACA,KAAK,CAACG,OAAO,CAAC;KACzD,MAAM;MACLD,OAAO,CAACF,KAAK,CACX,yBAAyBA,KAAK,CAACI,MAAM,IAAI,GAAG,aAAaJ,KAAK,CAACA,KAAK,EAAE,CACvE;;IAEH,OAAOpB,UAAU,CAAC,iDAAiD,CAAC;EACtE;;AAhEWC,iBAAiB;mBAAjBA,iBAAiB;AAAA;AAAjBA,iBAAiB;SAAjBA,iBAAiB;EAAAwB,SAAjBxB,iBAAiB;EAAAyB,YAFhB;AAAM","names":["HttpHeaders","catchError","throwError","ServerHttpService","constructor","httpClient","headers","getNhanviens","url","REST_API_SERVER","get","httpOptions","pipe","handleError","getNhanvien","nhanvienID","getRamdomNhanvien","addNhanvien","data","post","deleteNhanVien","getProfile","error","ErrorEvent","console","message","status","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\hoain\\OneDrive\\Tài liệu\\GitHub\\QL_Nhan_Su\\src\\app\\service\\server-http.service.ts"],"sourcesContent":["import { HttpClient, HttpErrorResponse, HttpHandler, HttpHeaders } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable, catchError, throwError } from 'rxjs';\r\nimport { NhanViens } from '../model/nhanviens';\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ServerHttpService {\r\n  \r\n  private httpOptions = {\r\n    headers: new HttpHeaders({\r\n      'Context-Type': 'aplication/json',\r\n    })\r\n  }\r\nprivate REST_API_SERVER = 'http://localhost:3000';\r\n  modifyNhanvien: any;\r\n\r\n  constructor(private httpClient: HttpClient) { }\r\n\r\n  public getNhanviens(): Observable<any> {\r\n    const url = `${this.REST_API_SERVER}/nhanviens`;\r\n    return this.httpClient\r\n    .get<any>(url, this.httpOptions)\r\n    .pipe(catchError(this.handleError))\r\n  }\r\n\r\n  public getNhanvien(nhanvienID: number): Observable<any> {\r\n    const url = `${this.REST_API_SERVER}/nhanviens/` + nhanvienID;\r\n    return this.httpClient\r\n    .get<any>(url, this.httpOptions)\r\n    .pipe(catchError(this.handleError));\r\n  }\r\n\r\n  public getRamdomNhanvien(): void | Observable<any> {\r\n    const url = `http://randomuser.me/api/?results=1`;\r\n    return this.httpClient\r\n    .get<any>(url, this.httpOptions)\r\n    .pipe(catchError(this.handleError));\r\n  }\r\n\r\n  public addNhanvien(data: NhanViens) {\r\n    const url = `${this.REST_API_SERVER}/nhanviens`;\r\n    return this.httpClient\r\n    .post<any>(url, data, this.httpOptions)\r\n    .pipe(catchError(this.handleError));\r\n  }\r\n  \r\n  public deleteNhanVien(nhanvienID: number) {\r\n    const url = `${this.REST_API_SERVER}/profile`;\r\n    return this.httpClient\r\n    .get<any>(url, this.httpOptions)\r\n    .pipe(catchError(this.handleError));\r\n  }\r\n\r\n\r\n  public getProfile() {\r\n      const url = `${this.REST_API_SERVER}/profile`;\r\n      return this.httpClient\r\n      .get<any>(url, this.httpOptions)\r\n      .pipe(catchError(this.handleError))\r\n  }\r\n\r\n  private handleError(error: HttpErrorResponse) {\r\n    if (error.error instanceof ErrorEvent) {\r\n      console.error('An error occurred:', error.error.message);\r\n    } else {\r\n      console.error(\r\n        `Backend returned code ${error.status}, ` + `body was: ${error.error}`\r\n      );\r\n    }\r\n    return throwError('Something bad happened; please try again later.');\r\n  }\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}